eVTOLs' paths in urban environment for rescue missions : naïve algorithm and A* algorithm
Outline :
1/ Description of the project
2/ Software and version used
3/ Naive algorithm
	A/ Description of the bottom line
	B/ Functions used
4/ A* algorithm
	A/ Description of the bottom line
	B/ Functions used
5/ Steps to follow to make the program work
5/ Author

1/ The project consists of creating a two-dimensional environment simulating an urban environment in which there is a vertiport where an eVTOL will take off to rescue a target in a danger zone before returning to a specific point, where the victim will be taken to emergency. This programme therefore studies the management of eVTOLs’ paths with different algorithms. 
2/ Matlab 2023
3A/ The naive aspect of the algorithm lies in the fact that it will not try to optimise its trajectory but will wait until it detects the obstacle to avoid it, bypassing the obstacle very gradually. If it is not possible to avoid the obstacle, after a certain number of attempts, the eVTOL will naively trigger an emergency procedure by taking a safety altitude and naively taking a new random position so that it can reach its objective from a different angle.
3B/ The main program is ‘main_XevtolYtargetZobstacles’ which uses a lot of ancillary functions. Obstacles are randomly generated by ‘ObstaclePosition’ and ‘RandomPositionObstacleGenerator’. The eVTOL follows its trajectory by dodging obstacles using its ‘SensorDetectionForObstacle’ sensor and calculating the Euclidean distance separating it from the obstacle using ‘EuclidianDistance’. The position of the eVTOL is constantly updated using ‘deletAll’, which deletes previous positions, ‘updateEvtol’ and ‘calculateNewEvtolParam’.
4A/ The A* algorithm gives it an optimised trajectory compared with the naive algorithm. It plots a series of points that are linked by straight lines running as close as possible to the obstacles.
4B/ The main program is called ‘MainAstar’ and uses the ‘ASTARPATH’ program, which uses the general idea that guides the optimisation principle of the A* algorithm. The environment is provided by the ‘generate_random_map’ function, while the obstacles are randomly generated by ‘ObstaclePosition’, ‘RandomParamCircle’ and ‘CreateRandomeCircle’.
5/ To run the naive algorithm, follow these steps:
i/ click on main
ii/ Select the desired branch according to the type of algorithm desired and the number of eVTOLs and the number of obstacles chosen.
iii/ Open all the programs and the functions in the folder chosen
iv/ Make sure you have checked the path once Matlab has been opened to avoid any malfunctions
v/ Run the program
5/ AGOUDJIL—ELSPASS Célian

